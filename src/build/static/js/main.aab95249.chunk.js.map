{"version":3,"sources":["assets/income.svg","assets/outcome.svg","assets/total.svg","services/api.ts","hooks/useTransactions.tsx","components/Summary/style.ts","components/Summary/index.tsx","components/TransactionsTable/style.ts","components/TransactionsTable/index.tsx","components/Dashboard/style.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","styles/global.ts","components/NewTransactionModal/styles.ts","assets/close.svg","components/NewTransactionModal/index.tsx","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionsInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","summary","reduce","acc","type","deposits","amount","total","withdraws","src","IncomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","totalImg","TransactionsTable","map","title","className","category","DateTimeFormat","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","onClick","GlobalStyle","createGlobalStyle","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","incomeImg","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aab95249.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import axios from 'axios';\r\n\r\nexport const api = axios.create({\r\n    baseURL: 'http://localhost:3000/api'\r\n})","import { createContext, useEffect, useState, ReactNode, useContext } from 'react';\r\nimport { api } from '../services/api';\r\n\r\ninterface TransactionProps {\r\n    id: number\r\n    title: string\r\n    amount: number\r\n    type: string\r\n    category: string\r\n    createdAt: string;\r\n}\r\n\r\ntype TransactionInputProps = Omit<TransactionProps, 'id' | 'createdAt'>;\r\n\r\ninterface TransactionsProviderProps {\r\n    children: ReactNode\r\n} \r\n\r\ninterface TransactionsContextData {\r\n    transactions: TransactionProps[]\r\n    createTransaction: (transaction: TransactionInputProps) => Promise<void>\r\n}\r\n\r\nconst TransactionsContext = createContext<TransactionsContextData>(\r\n    {} as TransactionsContextData\r\n);\r\n\r\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\r\n    const [transactions, setTransactions] = useState<TransactionProps[]>([]);\r\n\r\n   useEffect(() => {\r\n    api.get('/transactions')\r\n        .then(response => setTransactions(response.data.transactions))  \r\n   }, []); \r\n\r\n   async function createTransaction(transactionsInput: TransactionInputProps) {\r\n    const response =  await api.post('/transactions', {\r\n        ...transactionsInput, \r\n        createdAt: new Date(),\r\n    })\r\n    const { transaction } = response.data;\r\n\r\n    setTransactions([\r\n        ...transactions,\r\n        transaction\r\n    ])\r\n   }\r\n\r\n   return (\r\n       <TransactionsContext.Provider value={{transactions, createTransaction}}>\r\n           {children}\r\n       </TransactionsContext.Provider>\r\n   )\r\n}\r\n\r\nexport function useTransactions() {\r\n    const context = useContext(TransactionsContext)\r\n\r\n    return context\r\n}","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 2rem;\r\n    margin-top: -10rem;\r\n\r\n    div { \r\n        background: var(--shape);\r\n        padding: 1.5rem 2rem;\r\n        border-radius: 0.25rem;\r\n        color: var(--text-title);\r\n\r\n        header { \r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n        }\r\n\r\n        strong {\r\n            display: block; \r\n            margin-top: 1rem;\r\n            font-size: 2rem;\r\n            font-weight: 500;\r\n            line-height: 3rem;\r\n        }\r\n\r\n        &:last-child {\r\n            background: var(--green);\r\n            color: #FFF;\r\n        }\r\n    }\r\n`;","import IncomeImg from '../../assets/income.svg';\r\nimport outcomeImg from '../../assets/outcome.svg';\r\nimport totalImg from '../../assets/total.svg';\r\nimport { useTransactions } from '../../hooks/useTransactions';\r\n\r\nimport { Container } from \"./style\";\r\n\r\nexport function Summary(){\r\n    const { transactions } = useTransactions();\r\n    \r\n    // const totalDeposits = transactions.reduce((acc, transaction) => { \r\n    //     if (transaction.type === 'deposit') {\r\n    //         return acc + transaction.amount;\r\n    //     }\r\n    //     return acc;\r\n    // }, 0)\r\n\r\n    const summary = transactions.reduce((acc, transaction) => {\r\n        if (transaction.type === 'deposit') {\r\n            acc.deposits += transaction.amount;\r\n            acc.total += transaction.amount;\r\n        } else {\r\n            acc.withdraws += transaction.amount;\r\n            acc.total -= transaction.amount;\r\n        }\r\n\r\n        return acc;\r\n\r\n    }, { \r\n        deposits: 0,\r\n        withdraws: 0,\r\n        total: 0, \r\n    })\r\n\r\n    return (\r\n        <Container>\r\n            <div>\r\n                <header>\r\n                    <p>Entradas</p>\r\n                    <img src={IncomeImg} alt=\"Entradas\" />\r\n                </header>\r\n                <strong>\r\n                    {new Intl.NumberFormat('pt-BR',{\r\n                        style: 'currency',\r\n                        currency: 'BRL'\r\n                    }).format(summary.deposits)}\r\n                </strong>\r\n            </div>\r\n            <div>\r\n                <header>\r\n                    <p>Saídas</p>\r\n                    <img src={outcomeImg} alt=\"Entradas\" />\r\n                </header>\r\n                <strong>- \r\n                {new Intl.NumberFormat('pt-BR',{\r\n                        style: 'currency',\r\n                        currency: 'BRL'\r\n                    }).format(summary.withdraws)}\r\n                </strong>\r\n            </div>\r\n            <div>\r\n                <header>\r\n                    <p>Total</p>\r\n                    <img src={totalImg} alt=\"Entradas\" />\r\n                </header>\r\n                <strong>{new Intl.NumberFormat('pt-BR',{\r\n                        style: 'currency',\r\n                        currency: 'BRL'\r\n                    }).format(summary.total)}\r\n                </strong>\r\n            </div>\r\n        </Container>\r\n    )\r\n}","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    margin-top: 4rem;\r\n\r\n    table { \r\n        width: 100%; \r\n        border-spacing: 0 0.5rem;\r\n\r\n        th { \r\n            color: var(--text-body);\r\n            font-weight: 400;\r\n            padding: 1rem 2rem;\r\n            text-align: left;\r\n            line-height: 1.5rem;\r\n        }\r\n\r\n        td { \r\n            padding: 1rem 2rem;\r\n            border: 0;\r\n            background: var(--shape);\r\n            color: var(--text-body);\r\n            border-radius: 0.25rem;\r\n\r\n            &:first-child {\r\n                color: var(--text-title);\r\n            }\r\n\r\n            &.deposit{\r\n                color: var(--green);\r\n            }\r\n\r\n            &.withdraw {\r\n                color: var(--red);\r\n            }\r\n        }\r\n    }\r\n`;","import { useTransactions } from \"../../hooks/useTransactions\";\r\nimport { Container } from \"./style\";\r\n\r\nexport function TransactionsTable() {\r\n    const { transactions } = useTransactions()\r\n\r\n    return (\r\n    <Container>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Título</th>\r\n                    <th>Valor</th>\r\n                    <th>Categoria</th>\r\n                    <th>Data</th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n            {transactions.map(transaction => (\r\n                <tr key={transaction.id}>\r\n                    <td>{transaction.title}</td>\r\n                    <td className={transaction.type}>{new Intl.NumberFormat('pt-BR',{\r\n                        style: 'currency',\r\n                        currency: 'BRL'\r\n                    }).format(transaction.amount)}</td>\r\n                    <td>{transaction.category}</td>\r\n                    <td>{new Intl.DateTimeFormat('pt-BR').format(new Date(transaction.createdAt))}</td>\r\n                </tr>\r\n            ))}\r\n                \r\n                \r\n            </tbody>\r\n        </table>\r\n    </Container>\r\n   ) \r\n}\r\n","import styled from \"styled-components\";\r\n\r\n\r\nexport const Container = styled.main`\r\n    max-width: 1120px;\r\n    margin: 0 auto;\r\n    padding: 2.5rem 1rem;\r\n`;","import { Summary } from \"../Summary\";\r\nimport { TransactionsTable } from \"../TransactionsTable\";\r\n\r\nimport { Container } from \"./style\";\r\n\r\nexport function Dashboard() {\r\n    return (\r\n        <Container>\r\n            <Summary />\r\n            <TransactionsTable />\r\n        </Container>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components';\r\n\r\nexport const Container = styled.header`\r\n    background: var(--blue);\r\n`\r\n\r\nexport const Content = styled.div`\r\n    max-width: 1120px;\r\n    margin: 0 auto;\r\n\r\n    padding: 2rem 1rem 12rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    button { \r\n        font-size: 1rem;\r\n        color: #FFFFFF;\r\n        background-color: var(--blue-light);\r\n        border: 0;\r\n        padding: 0 2rem;\r\n        border-radius: 0.25rem;\r\n        height: 3rem;\r\n\r\n        transition: filter .2s;\r\n\r\n        &:hover {\r\n            filter: brightness(0.9);\r\n        }\r\n    }\r\n`\r\n","import logoImg from '../../assets/logo.svg';\r\nimport { Container, Content } from './styles';\r\n\r\ninterface ModalProps {\r\n    onOpenNewTransactionModal: () => void;\r\n}\r\n\r\nexport function Header({ onOpenNewTransactionModal }:ModalProps) {\r\n    return (\r\n        <Container>\r\n            <Content >\r\n                <img src={logoImg} alt=\"dt money\" />\r\n                    <button type=\"button\" onClick={onOpenNewTransactionModal}> \r\n                        Nova Transação\r\n                    </button>\r\n            </Content>\r\n        </Container>\r\n    )\r\n}","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    :root {\r\n        --background: #F0F2F5;\r\n        --red: #E62E4D;\r\n        --blue: #5429CC;\r\n        --green: #33CC95;\r\n        --blue-light: #6933FF;\r\n        --text-title: #363F5F;\r\n        --text-body: #969CB3;\r\n        --shape: #FFFFFF;\r\n    }\r\n    \r\n    * {\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    // font-size: 16px (Desktop);\r\n    html {\r\n        @media (max-width: 1080px) {\r\n            font-size: 93.75%; //15px\r\n        }\r\n\r\n        @media (max-width: 720px) {\r\n            font-size: 87.5%; //14px\r\n        }\r\n    }\r\n\r\n    body {\r\n        background: var(--background);\r\n        -webkit-font-smoothing: antialiased;\r\n    }\r\n\r\n    body, input, textarea, button {\r\n        font-family: 'Poppins', sans-serif;\r\n        font-weight: 400;\r\n    } \r\n\r\n    h1,h2,h3,h4,h5,h6,strong {\r\n        font-weight: 600;\r\n    }\r\n\r\n    button { \r\n        cursor: pointer;\r\n    }\r\n\r\n    [disabled] {\r\n        opacity: 0.6;\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    .react-modal-overlay {\r\n        background: rgba(0,0,0,0.5);\r\n        position: fixed;\r\n        top: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        right: 0;\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    .react-modal-content {\r\n        width: 100%;\r\n        max-width: 576px;\r\n        background: var(--background);\r\n        padding: 3rem;\r\n        position: relative;\r\n        border-radius: 0.25rem;\r\n    }\r\n\r\n    .react-modal-close {\r\n        position: absolute;\r\n        right: 1.5rem;\r\n        top: 1.5rem;\r\n        border: 0;\r\n        background: transparent;\r\n        transition: filter .2s;\r\n\r\n        &:hover {\r\n            filter: brightness(0.8);\r\n        }\r\n    }\r\n`\r\n","import styled from 'styled-components';\r\nimport { darken, transparentize } from 'polished'\r\n\r\nexport const Container = styled.form`\r\n    h2 { \r\n        color: var(--text-title);\r\n        font-size: 1.5rem;\r\n        margin-bottom: 2rem;\r\n    }\r\n\r\n    input {\r\n        width: 100%;\r\n        padding: 0 1.5rem;\r\n        height: 4rem;\r\n        border-radius: 0.25rem;\r\n\r\n        border: 1px solid #d7d7d7;\r\n        background: #e7e9ee;\r\n\r\n        font-weight: 400;\r\n        font-size: 1rem;\r\n\r\n        &::placeholder {\r\n            color: var(--text-body);\r\n        }\r\n\r\n        & + input {\r\n            margin-top: 1rem;\r\n        }\r\n    }\r\n\r\n    button[type=\"submit\"] {\r\n        width: 100%;\r\n        padding: 0 1.5rem;\r\n        height: 4rem;\r\n        background: var(--green);\r\n        color: #FFF;\r\n        border-radius: 0.25rem;\r\n        border: 0;\r\n        font-size: 1rem;\r\n        margin-top: 1.5rem;\r\n        font-weight: 600;\r\n\r\n        transition: filter .2s;\r\n        &:hover {\r\n            filter: brightness(0.9);\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TransactionTypeContainer = styled.div`\r\n    margin: 1rem 0;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 0.5rem;\r\n`\r\n\r\ninterface RadioBoxProps {\r\n    isActive: boolean;\r\n    activeColor: 'green' | 'red';\r\n}\r\n\r\nconst colors = {\r\n    green: '#33CC95',\r\n    red: '#E62E4D'\r\n};\r\n\r\nexport const RadioBox = styled.button<RadioBoxProps>`\r\n    height: 4rem;\r\n    border: 1px solid #d7d7d7;\r\n    border-radius: 0.25rem;\r\n\r\n    background: ${(props) => props.isActive \r\n        ? transparentize( 0.8,colors[props.activeColor]) \r\n        : 'transparent' \r\n    };\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    transition: border-color .2s;\r\n\r\n    &:hover {\r\n        border-color: ${darken(0.1, '#d7d7d7')};\r\n    }\r\n\r\n    img {\r\n        width: 20px;\r\n        height: 20px;\r\n    }\r\n\r\n    span {\r\n        display: inline-block;\r\n        margin-left: 1rem;\r\n        font-size: 1rem;\r\n        color: var(--text-title);\r\n    }\r\n`\r\n","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import { FormEvent, useState } from 'react'\r\nimport Modal from 'react-modal'\r\nimport incomeImg from '../../assets/income.svg'\r\nimport outcomeImg from '../../assets/outcome.svg'\r\nimport { Container,TransactionTypeContainer,RadioBox } from './styles'\r\nimport closeImg from '../../assets/close.svg'\r\nimport { useTransactions } from '../../hooks/useTransactions'\r\n\r\n\r\ninterface NewTransactionModalProps {\r\n    isOpen: boolean;\r\n    onRequestClose: () => void;\r\n}\r\n\r\nexport function NewTransactionModal({ isOpen, onRequestClose}: NewTransactionModalProps) {\r\n    const { createTransaction } = useTransactions();\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n    const [category, setCategory] = useState('');\r\n    const [type, setType] = useState('deposit');\r\n\r\n    async function handleCreateNewTransaction(event: FormEvent) {\r\n        event.preventDefault(); \r\n\r\n        await createTransaction({\r\n            title, \r\n            amount,\r\n            category,\r\n            type\r\n        });\r\n\r\n        setTitle('');\r\n        setAmount(0);\r\n        setCategory('');\r\n        setType('deposit');\r\n        onRequestClose();\r\n    }\r\n\r\n    return (\r\n        <Modal \r\n            isOpen={isOpen} \r\n            onRequestClose={onRequestClose}\r\n            overlayClassName=\"react-modal-overlay\"\r\n            className=\"react-modal-content\"\r\n        >\r\n        <button type=\"button\" onClick={onRequestClose} className=\"react-modal-close\">\r\n            <img src={closeImg} alt=\"Fechar Modal\" />\r\n        </button>\r\n\r\n        <Container onSubmit={handleCreateNewTransaction}>\r\n        <h2>Cadastrar Transações</h2> \r\n        <input \r\n            placeholder=\"Título\"\r\n            value={title}\r\n            onChange={event => setTitle(event.target.value)}\r\n        />\r\n        <input \r\n            placeholder=\"Valor\" \r\n            type=\"number\" \r\n            value={amount}\r\n            onChange={event => setAmount(Number(event.target.value))}\r\n        />\r\n\r\n        <TransactionTypeContainer>\r\n        <RadioBox \r\n            type=\"button\" \r\n            onClick={() => { setType('deposit')}}\r\n            isActive={type === 'deposit'}\r\n            activeColor=\"green\"\r\n        >\r\n            <img src={incomeImg} alt=\"Entrada\" />\r\n            <span>Entrada</span>\r\n        </RadioBox>\r\n\r\n        <RadioBox \r\n            type=\"button\" \r\n            onClick={() => { setType('withdraw')}} \r\n            isActive={type === 'withdraw'}\r\n            activeColor=\"red\"\r\n        >\r\n            <img src={outcomeImg} alt=\"Saída\" />\r\n            <span>Saída</span>\r\n        </RadioBox>\r\n        </TransactionTypeContainer>\r\n\r\n        <input \r\n            placeholder=\"Categoria\"\r\n            value={category}\r\n            onChange={event => setCategory(event.target.value)}\r\n        />\r\n        <button type=\"submit\">\r\n            Cadastrar\r\n        </button>\r\n        </Container>\r\n      </Modal> \r\n    )\r\n}","import { Dashboard } from './components/Dashboard';\nimport { Header } from './components/Header';\nimport { GlobalStyle } from './styles/global';\nimport Modal from 'react-modal';\nimport { useState } from 'react';\nimport { NewTransactionModal } from './components/NewTransactionModal';\nimport { TransactionsProvider } from './hooks/useTransactions';\n\nModal.setAppElement('#root');\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n\n    function handleOpenNewTransactionModal() {\n        setIsNewTransactionModalOpen(true);\n    }\n\n    function handleCloseNewTransactionModal() {\n        setIsNewTransactionModalOpen(false);\n    }\n  return (\n    <TransactionsProvider>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n      <Dashboard />\n      <NewTransactionModal\n        isOpen={isNewTransactionModalOpen} \n        onRequestClose={handleCloseNewTransactionModal}\n       />\n      <GlobalStyle />\n    </TransactionsProvider>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createServer, Model } from 'miragejs';\nimport { App  } from './App';\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: 'Freelance de Website',\n          type: 'deposit',\n          category: 'Dev',\n          amount: 6000,\n          createdAt: new Date('2021-06-12 09:00:00'),\n        },\n        {\n          id: 2,\n          title: 'Aluguel',\n          type: 'withdraw',\n          category: 'casa',\n          amount: 1100,\n          createdAt: new Date('2021-06-17 09:00:00'),\n        }\n      ]\n    })\n  },\n\n  routes() {\n    this.namespace = 'api';\n\n    this.get('/transactions', () => {\n      return this.schema.all('transaction')\n    })\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody);\n\n      return schema.create('transaction', data)\n    })\n\n    \n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}